.include "nominal.jsim"
.include "stdcell.jsim"
.include "lab3_mult.jsim"
* .include "lab3_testadder.jsim"
* .include "lab3_testcompare.jsim"
* .include "lab3_testboolean.jsim"
* .include "lab3_testshifter.jsim"
* .include "lab3_testmultiply.jsim"
.include "lab3checkoff.jsim"




**********************************
**** FA circuit ******************
.subckt FA a b cin s co
* Paste your answer from Lab 2 here
* Replace the gates using stdcell gates instead of your custom gates
* BEGIN ANSWER
* Co Circuit
XNANDAB a b ab nand2
XNANDBC b cin bc nand2
XNANDAC a cin ac nand2
XINVAC ac ac_i inverter
XNANDABBC ab bc abbc nand2
XNORABC abbc ac_i co_i nor2
XINVABC co_i co inverter

* S Circuit
XXORAB a b ab_xor xor2
XXORABC ab_xor cin s xor2

* END ANSWER
.ends

**********************************
**** Adder32 circuit *************
.subckt adder32 ALUFN[0] a[31:0] b[31:0] s[31:0] z v n
* BEGIN ANSWER
* Creating XB[31:0]
XXORB b[31:0] ALUFN0#32 xb[31:0] xor2
* Ripple Carry
XFA1 a0 xb0 ALUFN0 s0 co0 FA
XFATheRest a[31:1] xb[31:1] co[30:0] s[31:1] co[31:1] FA

* z
* First Layer
XFIRSTLAYER s[30:0:2] s[31:1:2] fl_o[15:0] or2
XSECONDLAYER fl_o[14:0:2] fl_o[15:1:2] sl_o[7:0] or2
XTHIRDLAYER sl_o[6:0:2] sl_o[7:1:2] tl_o[3:0] or2
XFOURTHLAYER tl_o[2:0:2] tl_o[3:1:2] four_o[1:0] or2
XLASTLAYER four_o0 four_o1 no_inv_z or2
XINVERTZ no_inv_z z inverter


* v
XAND1 xb31 a31 alpha1 and2
XINVERTS31 S31 alpha2 inverter
XAND2 alpha1 alpha2 alpha and2

XINVERTXB31 xb31 inv_xb31 inverter
XINVERTA31 a31 inv_a31 inverter
XAND3 inv_xb31 inv_a31 beta1 and2
XAND4 beta1 s31 beta and2

XVFINALOR alpha beta v or2

* n
XBUFFERS31 s31 n buffer


* END ANSWER
.ends
*********************************


**********************************
**** Compare32 circuit ***********
.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
* BEGIN ANSWER
.connect 0 cmp[31:1]

XLESSTHAN n v one_zero xor2

XLESSTHANEQ z one_zero one_one or2

XCOMPARE ALUFN2 ALUFN1 0 one_zero z one_one cmp0 mux4

* END ANSWER
.ends
**********************************

**********************************
**** Boolean32 circuit ***********
.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
* BEGIN ANSWER

XMUXES A[31:0] B[31:0] ALUFN0#32 ALUFN1#32 ALUFN2#32 ALUFN3#32 boole[31:0] mux4

* END ANSWER
.ends
**********************************

**********************************
**** Shifter32 circuit ***********
.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]
* BEGIN ANSWER
* SHIFT LEFT
* 16-bit Left Shifter
XMUXSHIFTL16_1 B4#16 A[31:16] A[15:0] WSHL[31:16] mux2
XMUXSHIFTL16_2 B4#16 A[15:0] 0#16 WSHL[15:0] mux2

* 8-bit Left Shifter
XMUXSHIFTL8_1 B3#24 WSHL[31:8] WSHL[23:0] XSHL[31:8] mux2
XMUXSHIFTL8_2 B3#8 WSHL[7:0] 0#8 XSHL[7:0] mux2

* 4-bit Left Shifter
XMUXSHIFTL4_1 B2#28 XSHL[31:4] XSHL[27:0] YSHL[31:4] mux2
XMUXSHIFTL4_2 B2#4 XSHL[3:0] 0#4 YSHL[3:0] mux2

* 2-bit Left Shifter
XMUXSHIFTL2_1 B1#30 YSHL[31:2] YSHL[29:0] ZSHL[31:2] mux2
XMUXSHIFTL2_2 B1#2 YSHL[1:0] 0#2 ZSHL[1:0] mux2

* 1-bit Left Shifter
XMUXSHIFTL1_1 B0#31 ZSHL[31:1] ZSHL[30:0] SHL[31:1] mux2
XMUXSHIFTL1_2 B0 ZSHL0 0 SHL0 mux2




* SHIFT RIGHT
* 16-bit Right Shifter
XMUXSHIFTR16_1 B4#16 A[31:16] 0#16 WSHR[31:16] mux2
XMUXSHIFTR16_2 B4#16 A[15:0] A[31:16] WSHR[15:0] mux2

* 8-bit Right Shifter
XMUXSHIFTR8_1 B3#8 WSHR[31:24] 0#8 XSHR[31:24] mux2
XMUXSHIFTR8_2 B3#24 WSHR[23:0] WSHR[31:8] XSHR[23:0] mux2

* 4-bit Right Shifter
XMUXSHIFTR4_1 B2#4 XSHR[31:28] 0#4 YSHR[31:28] mux2
XMUXSHIFTR4_2 B2#28 XSHR[27:0] XSHR[31:4] YSHR[27:0] mux2

* 2-bit Right Shifter
XMUXSHIFTR2_1 B1#2 YSHR[31:30] 0#2 ZSHR[31:30] mux2
XMUXSHIFTR2_2 B1#30 YSHR[29:0] YSHR[31:2] ZSHR[29:0] mux2

* 1-bit Right Shifter
XMUXSHIFTR1_1 B0 ZSHR31 0 SHR31 mux2
XMUXSHIFTR1_2 B0#31 ZSHR[30:0] ZSHR[31:1] SHR[30:0] mux2




* SHIFT RIGHT ARITHMETIC 
* 16-bit Right Shifter Arithmetic
XMUXSHIFTRA16_1 B4#16 A[31:16] A31#16 WSHRA[31:16] mux2
XMUXSHIFTRA16_2 B4#16 A[15:0] A[31:16] WSHRA[15:0] mux2

* 8-bit Right Shifter Arithmetic
XMUXSHIFTRA8_1 B3#8 WSHRA[31:24] A31#8 XSHRA[31:24] mux2
XMUXSHIFTRA8_2 B3#24 WSHRA[23:0] WSHRA[31:8] XSHRA[23:0] mux2

* 4-bit Right Shifter Arithmetic
XMUXSHIFTRA4_1 B2#4 XSHRA[31:28] A31#4 YSHRA[31:28] mux2
XMUXSHIFTRA4_2 B2#28 XSHRA[27:0] XSHRA[31:4] YSHRA[27:0] mux2

* 2-bit Right Shifter Arithmetic
XMUXSHIFTRA2_1 B1#2 YSHRA[31:30] A31#2 ZSHRA[31:30] mux2
XMUXSHIFTRA2_2 B1#30 YSHRA[29:0] YSHRA[31:2] ZSHRA[29:0] mux2

* 1-bit Right Shifter Arithmetic
XMUXSHIFTRA1_1 B0 ZSHRA31 A31 SHRA31 mux2
XMUXSHIFTRA1_2 B0#31 ZSHRA[30:0] ZSHRA[31:1] SHRA[30:0] mux2



* Combine
XFINALMUX ALUFN1#32 ALUFN0#32 SHL[31:0] 0#32 SHR[31:0] SHRA[31:0] shift[31:0] mux4

* END ANSWER
.ends
**********************************

**********************************
**** ALU32 circuit ***************
.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
* BEGIN ANSWER

XRCA ALUFN0 A[31:0] B[31:0] S[31:0] z v n adder32
XCOMPARE ALUFN[2:1] z v n cmp[31:0] compare32
XBOOLEAN ALUFN[3:0] A[31:0] B[31:0] boole[31:0] boole32
XSHIFTER ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32
XMULTIPLY A[31:0] B[31:0] P[31:0] mult32

XSMALLMUX ALUFN1#32 S[31:0] P[31:0] zero_zero[31:0] mux2
XBIGMUX_THE_REST ALUFN5#32 ALUFN4#32 zero_zero[31:0] shift[31:0] boole[31:0] cmp[31:0] alu[31:0] mux4


* END ANSWER
.ends
**********************************